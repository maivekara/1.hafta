name: Finans Payment Pipeline

on:
  push:
    branches: [main]
  pull_request: # PR'lar için de çalışsın
    branches: [main]
  workflow_dispatch: # Manuel çalıştırmaya izin verir

env:
  IMAGE_NAME: ozturk25/payment-service # Docker Hub kullanıcı adınız/imaj adınız (örn: your-dockerhub-username/your-repo-name)
  AWS_REGION: eu-central-1

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions: # Gerekli izinler
      contents: read # Kodu çekmek için
      packages: write # Docker Hub'a push yapmak için
      security-events: write # Trivy SARIF raporunu yüklemek için
      id-token: write # AWS kimlik doğrulaması için OIDC kullanılıyorsa

    steps:
      - name: Kodu Çıkart
        uses: actions/checkout@v4

      - name: AWS Kimlik Bilgilerini Yapılandır
        uses: aws-actions/configure-aws-credentials@v4 # OIDC ile AWS'ye kimlik doğrulaması için
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # Eğer OIDC kullanıyorsanız, yukarıdaki iki secret yerine aşağıdaki satırları kullanın:
          # role-to-assume: arn:aws:iam::ACCOUNT_ID:role/YOUR_GITHUB_ACTIONS_ROLE
          # duration-seconds: 900 # (Opsiyonel) Rolün varsayılan süresi (900 saniye = 15 dakika)

      - name: Docker Buildx Kurulumu
        uses: docker/setup-buildx-action@v3 # En son sürüm

      - name: Docker İmajını Oluştur ve Yükle
        uses: docker/build-push-action@v5 # En son sürüm
        with:
          context: . # Dockerfile'ın bulunduğu dizin
          push: false # Şimdilik Docker Hub'a göndermiyoruz, sadece yerel olarak yüklüyoruz
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }},${{ env.IMAGE_NAME }}:latest # İmajı SHA ve latest ile etiketle
          load: true # <-- Burası kritik! İmajı çalıştırıcının Docker daemon'ına yükler

      - name: Testleri Çalıştır
        run: |
          # 'tests' dizininin varlığını kontrol et
          if [ -d "tests" ]; then
            echo "Tests dizini bulundu. Testler çalıştırılıyor..."
            # Testleri Docker konteyneri içinde çalıştır
            # python -m pytest komutunun bulunduğu bir entrypoint veya komut kullanın
            docker run --rm ${{ env.IMAGE_NAME }}:${{ github.sha }} python -m pytest tests/
          else
            echo "Tests dizini bulunamadı, testler atlanıyor."
            exit 0 # Test dizini yoksa adımı başarılı olarak tamamla
          fi

      - name: Trivy Güvenlik Taraması
        uses: aquasecurity/trivy-action@0.14.0
        with:
          # İmaj referansını doğrudan ortam değişkenlerinden alıyoruz
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }} # <--- Burası artık doğru çalışmalı
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
          # İsteğe bağlı diğer ayarlar:
          # vuln-type: 'os,library'
          # ignore-unfixed: true
          # exit-code: '1' # Zafiyet bulunursa aksiyonu başarısız yapar

      - name: Trivy Sonuçlarını Yükle (SARIF)
        uses: github/codeql-action/upload-sarif@v3 # En son sürüm
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker Hub'a Giriş Yap
        uses: docker/login-action@v3 # En son sürüm
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Hub'a Gönder
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: ECS'ye Dağıt
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # Projenizin kök dizinindeki task-definition.json dosyasını belirtiyoruz
          task-definition: task-definition.json
          # Task tanımında kullanılacak Docker imajını belirtiyoruz.
          # Aksiyon, task-definition.json içindeki <IMAGE_NAME> yer tutucusunu bu değerle değiştirecek.
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }} # <--- Bu satır kritik!
          service: payment-service
          cluster: payment-cluster
          wait-for-service-stability: true

      - name: Slack Bildirimi
        uses: slackapi/slack-github-action@v1.24.0 # En son sürüm
        if: success() || failure() # Her durumda (başarılı veya başarısız) bildirim gönder
        with:
          payload: |
            {
              "text": "${{ job.status == 'success' && '✅ Deploy Başarılı' || '❌ Deploy Başarısız' }}: ${{ env.IMAGE_NAME }}:${{ github.sha }}",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ job.status == 'success' && '✅ *Deploy Tamamlandı*' || '❌ *Deploy Başarısız Oldu*' }} \n*Image:* `${{ env.IMAGE_NAME }}:${{ github.sha }}` \n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                }
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
